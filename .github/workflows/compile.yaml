name: Build macOS Executable

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [ x86_64, arm64 ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 

      - name: Set up Python 3.11
        uses: actions/setup-python@v5   
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

      - name: Install ARM64 deps
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
          python3 -m pip install nuitka


      - name: Install Intel (Rosetta) deps
        if: matrix.arch == 'x86_64'
        run: |
          arch -x86_64 python3 -m pip install --upgrade pip
          arch -x86_64 python3 -m pip install -r requirements.txt
          arch -x86_64 python3 -m pip install nuitka


      - name: Compile for ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            arch -x86_64 python3 -m nuitka \
              --onefile \
              --macos-create-app-bundle \
              --macos-app-icon=app_icon.icns \
              --enable-plugin=tk-inter \
              --enable-plugin=upx \
              --macos-target-arch=x86_64 \
              --output-dir=dist/x86_64 \
              ncvault.py
          else
            python3 -m nuitka \
              --onefile \
              --macos-create-app-bundle \
              --macos-app-icon=app_icon.icns \
              --enable-plugin=tk-inter \
              --enable-plugin=upx \
              --macos-target-arch=arm64 \
              --output-dir=dist/arm64 \
              ncvault.py
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ncvault-${{ matrix.arch }}
          path: dist/${{ matrix.arch }}/*.app

  universal:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Download ARM64 artifact
        uses: actions/download-artifact@v4
        with:
          name: ncvault-ui-arm64
          path: arm64_app       # now contains something like arm64_app/ncvault_ui.app

      - name: Download Intel artifact
        uses: actions/download-artifact@v4
        with:
          name: ncvault-ui-x86_64
          path: intel_app

      - name: Merge into a Universal2 .app
        run: |
          set -e

          # Find the bundle name (e.g. ncvault_ui.app)
          APP_NAME=$(basename arm64_app/*.app)

          # Prepare the new bundle skeleton
          mkdir -p universal_app/Contents/MacOS universal_app/Contents/Resources

          # Merge the two CPU slices
          lipo -create \
            "arm64_app/$APP_NAME/Contents/MacOS/$APP_NAME" \
            "intel_app/$APP_NAME/Contents/MacOS/$APP_NAME" \
            -output "universal_app/Contents/MacOS/$APP_NAME"

          # Copy Info.plist
          cp "arm64_app/$APP_NAME/Contents/Info.plist" \
             "universal_app/Contents/Info.plist"

          # Only copy Resources if present (avoids wildcard error)
          if [ -d "arm64_app/$APP_NAME/Contents/Resources" ]; then
            cp -R "arm64_app/$APP_NAME/Contents/Resources/"* \
                  "universal_app/Contents/Resources/"
          fi

          # Finalize bundle name
          mv universal_app "${APP_NAME%.app}-universal2.app"
      - name: Upload Universal2 bundle
        uses: actions/upload-artifact@v4
        with:
          name: ncvault-ui-universal2
          path: "*-universal2.app"
